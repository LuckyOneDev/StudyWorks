/******************************************************************************
*                              Курс информатики                               *
*******************************************************************************
* Project Type  : Win32 Console Application                                   *
* Project Name  : Generation of various sequences                             *
* File Name     : LR1.cpp                                                     *
* Language      : c++, MSVS ver 2015 and above                                *
* Programmers   : Парфенюк Дмитрий Александрович, Мокшин Иван Николаевич      *
* Modified by   :                                                             *
* Created       : 7.09.2021                                                   *
* Last Revision : 17.09.2021                                                  *
******************************************************************************/

#include <iostream>
#include <ctime>
#include <fstream>
#include <chrono>
#include <iomanip>

const char* functionValueTestFileName = "function_values.csv";
const char* functionTimeTestFileName = "function_times.csv";

//Формирует возрастающую последовательность чисел
//arr - указатель на область памяти, выделенной под массив
//size - размер области памяти
template <typename arrType>
void generateIncreaseSequence(arrType* arr,
                                int size,
                                int top = 10,
                                int bottom = 0) {
    double diff = ((double)top - (double)bottom) / (double)size;
    for (int i = 0; i < size; i++) {
        arr[i] = (arrType)(i * diff);
    }
}

//Формирует убывающую последовательность чисел
//arr - указатель на область памяти, выделенной под массив
//size - размер области памяти
template <typename arrType>
void generateDecreaseSequence(arrType* arr,
                                int size,
                                int top = 10,
                                int bottom = 0) {
    double diff = ((double)top - (double)bottom) / (double)size;
    for (int i = size - 1; i >= 0; i--) {
        arr[i] = (arrType)((size - i - 1) * diff);
    }
}

//Формирует случайную последовательность чисел
//arr - указатель на область памяти, выделенной под массив
//size - размер области памяти
template <typename arrType>
void generateRandomSequence(arrType* arr,
                            int size,
                            int top = 10,
                            int bottom = 0) {
    int range = top - bottom;
    for (int i = 0; i < size; i++)
        arr[i] = (arrType)(rand() % range + bottom);
}

//Формирует пилообразную последовательность чисел
//arr - указатель на область памяти, выделенной под массив
//size - размер области памяти
template <typename arrType>
void generateSawSequence(arrType* arr,
                        int size,
                        int top = 10,
                        int bottom = 0) {
    int range = top - bottom;
    for (int i = 0; i < size; i++) {
        arr[i] = (arrType)(i % range + bottom);
    }
};

//Формирует синусообразную последовательность чисел
//arr - указатель на область памяти, выделенной под массив
//size - размер области памяти
template <typename arrType>
void generateSinSequence(arrType* arr,
                        int size,
                        int top = 10,
                        int bottom = 0) {
    int stepCount = 20;
    float stepSize = 6.28 / stepCount;
    int halfRange = (top - bottom) / 2;
    int primalSinSize = size < stepCount ? size : stepCount;

    for (int i = 0; i < primalSinSize; i++) {
        arr[i] = (arrType)(sin(i * stepSize) * halfRange + bottom + halfRange);
    }

    for (int i = primalSinSize; i < size; i++) {
        arr[i] = arr[i % stepCount];
    }
};

//Тестирует набор функций на предмет скорости исполнения. 
//Может вывести результат работы функций в файл
//func - функция для тестирования
//sequenceSize - рамзер генерируемой последовательности
//print - булевый флаг печати
//Возвращает количество наносекунд, 
//за которое сгенерировалась последовательность
template <typename arrType>
long long testFunction(void (*func)(arrType*, int, int, int),
                                int sequenceSize = 200,
                                int top = 10,
                                int bottom = 0,
                                bool print = false ) {
    //Выделяем память
    arrType* arr = new arrType[sequenceSize];

    //Замеряем время выполнения
    auto beginTime = std::chrono::steady_clock::now();
    func(arr, sequenceSize, top, bottom);
    auto endTime = std::chrono::steady_clock::now();
    auto elapsedMs = std::chrono::duration_cast<std::chrono::microseconds>(endTime - beginTime).count();

    //Нужно ли печатать?
    if (print) {

        // Устанавливаем десятичный разделитель на ','
        std::locale::global(std::locale(""));

        // Печать в файл .csv для удобства импортирования в Excel
        std::ofstream ofs(functionValueTestFileName, std::ofstream::out | std::ofstream::app);

        for (int i = 0; i < sequenceSize; i++) {
            ofs << arr[i] << ';';
        }
        ofs << '\n';

        ofs.close();

        // Сбрасываем настройки вывода
        std::locale::global(std::locale("C"));
    }

    //Очищаем память
    delete[] arr;

    return elapsedMs;
}

int main() {
    const int functionCount = 5; //Кол-во функций
    const int functionExp = 500000; //коэффицент возрастания размера рядов для теста

    //Инициализация рандомизатора
    srand(time(NULL));

    //Функции с типом int
    void (*testFunctionsInt[])(int*, int, int, int) = {
        generateIncreaseSequence,
        generateDecreaseSequence,
        generateRandomSequence,
        generateSawSequence,
        generateSinSequence

    };

    //Функции с типом float
    void (*testFunctionsFloat[])(float*, int, int, int) = {
        generateIncreaseSequence,
        generateDecreaseSequence,
        generateRandomSequence,
        generateSawSequence,
        generateSinSequence,
    };

    //Создание небольших последовательностей для построения графиков
    std::cout << "Generation of function graphics..." << std::endl;
    for (int i = 0; i < functionCount; i++) {
        testFunction(testFunctionsFloat[i], 100, 10, 0, true);
    }

    //Тестирование времени создания больших последовательностей
    std::cout << "Testing functions' time..." << std::endl;
    std::cout << "===================== Int Funcs =====================" << std::endl;

    std::ofstream ofs(functionTimeTestFileName, std::ofstream::out | std::ofstream::app);
    ofs << "function;" << "argcount;" << "time;" << '\n';

    for (int i = 0; i < functionCount; i++) {

        for (int j = 1; j < 11; j++) {
            unsigned int time = testFunction(testFunctionsInt[i], j * functionExp);
           
            //Вывод шапки
            std::cout << "Function: " << i
                      << " ArgCount:" << std::setw(10) << j * functionExp
                      << " Time: " << std::setw(10) << time
                      << std::endl;
    
            //Вывод тела таблцы
            ofs  << i << ';' << j * functionExp << ';' << time << ";\n";
        }
    }

    std::cout << "===================== Float Funcs ====================="
        << std::endl;

    for (int i = 0; i < functionCount; i++) {
        for (int j = 1; j < 11; j++) {
            unsigned int time = testFunction(testFunctionsFloat[i], j * functionExp);
            std::cout << "Function: " << i
                << " ArgCount:" << std::setw(10) << j * functionExp
                << " Time: " << std::setw(10) << time
                << std::endl;
        }
    }
}
/**********************************END-OF-LR1.CPP******************************/
